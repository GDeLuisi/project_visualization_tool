name: Python application Development Test
on:
  push:
    branches: [ "development" ]
  workflow_dispatch:
    inputs:
      log_level:
        description: "The Log level to use on report creation filter"
        default: "DEBUG"
        type: choice
        options:
          - "DEBUG"
          - "INFO"
          - "WARNING"
          - "ERROR"
          - "NOTICE"
permissions:
  contents: read
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest","windows-latest","macos-latest"]
        p-version: ["3.12","3.13"]
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.p-version}}
    - name: 'Setup jq'
      uses: dcarbone/install-jq-action@v3
      with:
        version: "latest"
        force: false
    - if: runner.os == 'Windows'
      name: Git config for Windows
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      shell: bash
      run: |
        pytest
    - if: success() || failure()
      name: Read reports
      run: |
        jq -s '.[]| select( .level == "ERROR" or .level == "CRITICAL") | .function,.message,.logger' logs/logs.log.jsonl > errors.log
        jq -s '.[]| select( .level == "INFO" or .level == "DEBUG" or .level == "WARNING") | .function,.message,.logger' logs/logs.log.jsonl > infos.log
        echo -e "\nERRORS:\n"
        cat errors.log
        echo -e "\INFO:\n"
        cat infos.log
